// Code generated by MockGen. DO NOT EDIT.
// Source: software_finder.go

package software_finder

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	registry "golang.org/x/sys/windows/registry"
)

// MockregistryRepository is a mock of registryRepository interface.
type MockregistryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockregistryRepositoryMockRecorder
}

// MockregistryRepositoryMockRecorder is the mock recorder for MockregistryRepository.
type MockregistryRepositoryMockRecorder struct {
	mock *MockregistryRepository
}

// NewMockregistryRepository creates a new mock instance.
func NewMockregistryRepository(ctrl *gomock.Controller) *MockregistryRepository {
	mock := &MockregistryRepository{ctrl: ctrl}
	mock.recorder = &MockregistryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockregistryRepository) EXPECT() *MockregistryRepositoryMockRecorder {
	return m.recorder
}

// CreateKey mocks base method.
func (m *MockregistryRepository) CreateKey(k registry.Key, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", k, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockregistryRepositoryMockRecorder) CreateKey(k, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockregistryRepository)(nil).CreateKey), k, path)
}

// GetStringValue mocks base method.
func (m *MockregistryRepository) GetStringValue(k registry.Key, path, valueName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringValue", k, path, valueName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringValue indicates an expected call of GetStringValue.
func (mr *MockregistryRepositoryMockRecorder) GetStringValue(k, path, valueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringValue", reflect.TypeOf((*MockregistryRepository)(nil).GetStringValue), k, path, valueName)
}

// SetStringValue mocks base method.
func (m *MockregistryRepository) SetStringValue(k registry.Key, path, valueName, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStringValue", k, path, valueName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStringValue indicates an expected call of SetStringValue.
func (mr *MockregistryRepositoryMockRecorder) SetStringValue(k, path, valueName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStringValue", reflect.TypeOf((*MockregistryRepository)(nil).SetStringValue), k, path, valueName, value)
}

// MockfileRepository is a mock of fileRepository interface.
type MockfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfileRepositoryMockRecorder
}

// MockfileRepositoryMockRecorder is the mock recorder for MockfileRepository.
type MockfileRepositoryMockRecorder struct {
	mock *MockfileRepository
}

// NewMockfileRepository creates a new mock instance.
func NewMockfileRepository(ctrl *gomock.Controller) *MockfileRepository {
	mock := &MockfileRepository{ctrl: ctrl}
	mock.recorder = &MockfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileRepository) EXPECT() *MockfileRepositoryMockRecorder {
	return m.recorder
}

// DirExists mocks base method.
func (m *MockfileRepository) DirExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirExists indicates an expected call of DirExists.
func (mr *MockfileRepositoryMockRecorder) DirExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirExists", reflect.TypeOf((*MockfileRepository)(nil).DirExists), path)
}

// FileExists mocks base method.
func (m *MockfileRepository) FileExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockfileRepositoryMockRecorder) FileExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockfileRepository)(nil).FileExists), path)
}
